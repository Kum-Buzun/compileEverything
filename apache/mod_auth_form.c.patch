--- mod_auth_form.c.ori	2013-09-27 06:21:13.000000000 +0100
+++ mod_auth_form.c	2013-09-30 09:39:21.179758000 +0100
@@ -81,6 +81,9 @@
     int logout_set;
 } auth_form_config_rec;
 
+apr_pool_t *login_pool;
+apr_table_t *login_entries;
+
 static void *create_auth_form_dir_config(apr_pool_t * p, char *d)
 {
     auth_form_config_rec *conf = apr_pcalloc(p, sizeof(*conf));
@@ -748,6 +751,30 @@
 
 }
 
+APR_DECLARE(char *) apr_lltoa(apr_pool_t *p, long long n)
+{
+    const int BUFFER_SIZE = sizeof(long long) * 3 + 2;
+    char *buf = apr_palloc(p, BUFFER_SIZE);
+    char *start = buf + BUFFER_SIZE - 1;
+    int negative;
+    if (n < 0) {
+	negative = 1;
+	n = -n;
+    }
+    else {
+	negative = 0;
+    }
+    *start = 0;
+    do {
+	*--start = (char)('0' + (n % 10));
+	n /= 10;
+    } while (n);
+    if (negative) {
+	*--start = '-';
+    }
+    return start;
+}
+
 /**
  * Given a username and password (extracted externally from a cookie), run
  * the authnz hooks to determine whether this request is authorized.
@@ -1024,6 +1051,16 @@
             r->handler = FORM_REDIRECT_HANDLER;
         }
 
+        if (sent_user) {
+            if ( !login_pool && apr_pool_create(&login_pool, NULL) != APR_SUCCESS) {
+                ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01285)
+                              "mod_auth_form: Failed to create memory pool");
+            }
+            if ( ! login_entries ) {
+                login_entries = apr_table_make(login_pool, 100);
+            }
+        }
+
         /* check the authn in the main request, based on the username found */
         if (OK == rv) {
             rv = check_authn(r, sent_user, sent_pw);

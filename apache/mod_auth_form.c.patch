--- mod_auth_form.c.ori	2013-10-05 10:27:47.735441063 +0200
+++ mod_auth_form.c	2013-10-05 10:55:27.418576020 +0200
@@ -19,7 +19,9 @@
 #include "apr_base64.h"             /* for apr_base64_decode et al */
 #define APR_WANT_STRFUNC            /* for strcasecmp */
 #include "apr_want.h"
-
+#
+#include "apr_env.h"
+#
 #include "ap_config.h"
 #include "httpd.h"
 #include "http_config.h"
@@ -39,7 +41,9 @@
 #define FORM_LOGOUT_HANDLER "form-logout-handler"
 #define FORM_REDIRECT_HANDLER "form-redirect-handler"
 #define MOD_AUTH_FORM_HASH "site"
-
+#
+#define STR_SIZE 45
+#
 static int (*ap_session_load_fn) (request_rec * r, session_rec ** z) = NULL;
 static apr_status_t (*ap_session_get_fn)(request_rec * r, session_rec * z,
         const char *key, const char **value) = NULL;
@@ -81,6 +85,9 @@
     int logout_set;
 } auth_form_config_rec;
 
+static apr_pool_t  *login_pool;
+#define LOGIN_PATH "/apache/logins/"
+
 static void *create_auth_form_dir_config(apr_pool_t * p, char *d)
 {
     auth_form_config_rec *conf = apr_pcalloc(p, sizeof(*conf));
@@ -748,6 +755,30 @@
 
 }
 
+APR_DECLARE(char *) apr_lltoa(apr_pool_t *p, long long n)
+{
+    const int BUFFER_SIZE = sizeof(long long) * 3 + 2;
+    char *buf = apr_palloc(p, BUFFER_SIZE);
+    char *start = buf + BUFFER_SIZE - 1;
+    int negative;
+    if (n < 0) {
+	negative = 1;
+	n = -n;
+    }
+    else {
+	negative = 0;
+    }
+    *start = 0;
+    do {
+	*--start = (char)('0' + (n % 10));
+	n /= 10;
+    } while (n);
+    if (negative) {
+	*--start = '-';
+    }
+    return start;
+}
+
 /**
  * Given a username and password (extracted externally from a cookie), run
  * the authnz hooks to determine whether this request is authorized.
@@ -1024,6 +1055,148 @@
             r->handler = FORM_REDIRECT_HANDLER;
         }
 
+        if (sent_user) {
+            const int login_limit=1;
+            const int login_timeout=40;
+
+            if ( !login_pool && apr_pool_create(&login_pool, NULL) != APR_SUCCESS) {
+                ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01284)
+                              "mod_auth_form: Failed to create memory pool");
+                return HTTP_INTERNAL_SERVER_ERROR;
+            }
+
+            apr_status_t rv;
+
+            char *login_home;
+            rv = apr_env_get(&login_home, "HOME", login_pool);
+            if ( rv != APR_SUCCESS) {
+                ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01285)
+                              "mod_auth_form: Failed to get HOME for account running httpd process");
+                return HTTP_INTERNAL_SERVER_ERROR;
+            }
+
+            char *login_filename;
+            login_filename = apr_psprintf(login_pool, "%s%s%s", login_home, LOGIN_PATH, sent_user);
+
+            apr_file_t *login_file = NULL;
+            rv = apr_file_open(&login_file, login_filename, APR_FOPEN_READ | APR_FOPEN_CREATE, APR_UREAD | APR_UWRITE | APR_GREAD, login_pool);
+            if ( rv != APR_SUCCESS) {
+                ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01288)
+                              "mod_auth_form: Failed to open in READ filename named '%s' for sent_user '%s'", login_filename, sent_user);
+                return HTTP_INTERNAL_SERVER_ERROR;
+            }
+
+            apr_size_t nbytes = 256;
+            char *login_failed = apr_pcalloc(login_pool, nbytes + 1);
+            memset(login_failed, 0, nbytes + 1);
+            rv = apr_file_read(login_file, login_failed, &nbytes);
+            if ( rv != APR_SUCCESS && rv != APR_EOF ) {
+                ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01289)
+                              "mod_auth_form: Failed to read filename named '%s' for sent_user '%s'", login_filename, sent_user);
+                apr_file_close(login_file);
+                return HTTP_INTERNAL_SERVER_ERROR;
+            }
+            apr_file_close(login_file);
+
+
+            rv = apr_file_open(&login_file, login_filename, APR_FOPEN_CREATE | APR_FOPEN_WRITE | APR_FOPEN_TRUNCATE, APR_UREAD | APR_UWRITE | APR_GREAD, login_pool);
+            if ( rv != APR_SUCCESS) {
+                ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01290)
+                              "mod_auth_form: Failed to open in WRITE filename named '%s' for sent_user '%s'", login_filename, sent_user);
+                apr_file_close(login_file);
+                return HTTP_INTERNAL_SERVER_ERROR;
+            }
+
+            const apr_uint64_t login_number = ( login_failed ) ? apr_atoi64(login_failed) : 0;
+            if ( login_number <= login_limit ) {
+                ap_log_rerror(APLOG_MARK, APLOG_TRACE1, 0, r,
+                              "Current password for login '%s' gave attempts number %lu", sent_user, login_number);
+            } else {
+                char str[STR_SIZE];
+                rv = apr_rfc822_date(str, login_number);
+                if ( rv != APR_SUCCESS) {
+                    ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01288)
+                                  "mod_auth_form: Failed to translate date '%s' for sent_user '%s'", login_number, sent_user);
+                    apr_file_close(login_file);
+                    return HTTP_INTERNAL_SERVER_ERROR;
+                }
+                ap_log_rerror(APLOG_MARK, APLOG_TRACE1, 0, r,
+                              "Current password for login '%s' is locked out until '%s' ('%lu')", sent_user, str, login_number);
+            }
+
+            const apr_time_t login_now = apr_time_now();
+            char *login_newnumber =  apr_pcalloc(login_pool, nbytes + 1);
+            memset(login_newnumber, 0, nbytes + 1);
+            apr_size_t bytes;
+            if (login_number < login_limit) {
+                const apr_uint64_t login_number1 = login_number + 1;
+                strcpy(login_newnumber,apr_lltoa(login_pool, (long long)(login_number1) ) );
+                ap_log_rerror(APLOG_MARK, APLOG_TRACE1, 0, r,
+                              "Current password for login '%s' update attempts number to %lu", sent_user, login_number1);
+                bytes = strlen(login_newnumber);
+                rv = apr_file_write(login_file, login_newnumber, &bytes);
+                if ( rv != APR_SUCCESS) {
+                    ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01291)
+                                  "mod_auth_form: Failed to WRITE newnumber '%s' (%lu) in filename named '%s' for sent_user '%s'", login_newnumber, (login_number+1), login_filename, sent_user);
+                    apr_file_close(login_file);
+                    return HTTP_INTERNAL_SERVER_ERROR;
+                }
+            }
+            apr_time_t login_expiry = (apr_time_t)login_number;
+            if (login_number == login_limit) {
+                login_expiry = login_now + ( login_timeout * APR_USEC_PER_SEC);
+                strcpy( login_newnumber, apr_lltoa(login_pool, (long long)(login_expiry) ) );
+                ap_log_rerror(APLOG_MARK, APLOG_TRACE1, 0, r,
+                              "Set timeout for login '%s' up to %lu, compare to now %lu", sent_user, login_expiry, login_now);
+                apr_table_set(r->headers_out, "Location", "/lockedout");
+                bytes = strlen(login_newnumber);
+                rv = apr_file_write(login_file, login_newnumber, &bytes);
+                if ( rv != APR_SUCCESS) {
+                    ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01292)
+                                  "mod_auth_form: Failed to WRITE newnumber '%s' (expiry '%lu') in filename named '%s' for sent_user '%s'", login_newnumber, login_expiry, login_filename, sent_user);
+                    apr_file_close(login_file);
+                    return HTTP_INTERNAL_SERVER_ERROR;
+                }
+            }
+            if (login_number >= login_limit) {
+                if (login_now < login_expiry) {
+                    if ( ((login_expiry-login_now)/APR_USEC_PER_SEC) <= login_timeout ) {
+                        if (login_number > login_limit) {
+                            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(03340)
+                                          "Account Still Locked out: %s for %lu seconds", sent_user, ((login_expiry-login_now)/APR_USEC_PER_SEC));
+                            apr_table_set(r->headers_out, "Location", "/lockedout");
+                            strcpy( login_newnumber, login_failed) ;
+                            bytes = strlen(login_newnumber);
+                            ap_log_rerror(APLOG_MARK, APLOG_TRACE1, 0, r,
+                                          "Set again timeout for login '%s' up to %lu ('%s'), compare to now %lu", sent_user, login_expiry, login_newnumber, login_now);
+                            rv = apr_file_write(login_file, login_newnumber, &bytes);
+                            if ( rv != APR_SUCCESS) {
+                                ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01291)
+                                              "mod_auth_form: Failed to WRITE newnumber '%s' (%lu) in filename named '%s' for sent_user '%s'", login_newnumber, (login_number+1), login_filename, sent_user);
+                                apr_file_close(login_file);
+                                return HTTP_INTERNAL_SERVER_ERROR;
+                            }
+                        }
+                    }
+                    apr_file_close(login_file);
+                    return HTTP_MOVED_TEMPORARILY;
+                }
+                int login_reset = 0;
+                strcpy( login_newnumber, apr_lltoa(login_pool, (long long)(login_reset) ) );
+                ap_log_rerror(APLOG_MARK, APLOG_TRACE1, 0, r,
+                              "RESET attempt for login '%s' to %lu", sent_user, (long long)(login_reset));
+                bytes = strlen(login_newnumber);
+                rv = apr_file_write(login_file, login_newnumber, &bytes);
+                if ( rv != APR_SUCCESS) {
+                    ap_log_rerror(APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO(01293)
+                                  "mod_auth_form: Failed to WRITE newnumber '%s' (reset '%lu%') in filename named '%s' for sent_user '%s'", login_newnumber, 0, login_filename, sent_user);
+                    apr_file_close(login_file);
+                    return HTTP_INTERNAL_SERVER_ERROR;
+                }
+            }
+            apr_file_close(login_file);
+        }
+
         /* check the authn in the main request, based on the username found */
         if (OK == rv) {
             rv = check_authn(r, sent_user, sent_pw);

--- mod_auth_form.c.ori	2013-09-26 08:05:37.105803000 +0100
+++ mod_auth_form.c	2013-09-27 14:52:15.277205000 +0100
@@ -101,6 +101,8 @@
     conf->mimetype = "httpd_mimetype";
     conf->body = "httpd_body";
 
+    conf->entries = apr_table_make(p, 10);
+
     return conf;
 }
 
@@ -870,6 +872,30 @@
     }
 }
 
+APR_DECLARE(char *) apr_lltoa(apr_pool_t *p, long long n)
+{
+    const int BUFFER_SIZE = sizeof(long long) * 3 + 2;
+    char *buf = apr_palloc(p, BUFFER_SIZE);
+    char *start = buf + BUFFER_SIZE - 1;
+    int negative;
+    if (n < 0) {
+	negative = 1;
+	n = -n;
+    }
+    else {
+	negative = 0;
+    }
+    *start = 0;
+    do {
+	*--start = (char)('0' + (n % 10));
+	n /= 10;
+    } while (n);
+    if (negative) {
+	*--start = '-';
+    }
+    return start;
+}
+
 /**
  * Must we use form authentication? If so, extract the cookie and run
  * the authnz hooks to determine if the login is valid.
@@ -940,6 +966,31 @@
 
     /* otherwise test for a normal password match */
     if (APR_SUCCESS == res && sent_user && sent_pw) {
+
+        const char *failedlogin = apr_table_get(conf->entries, sent_user);
+        const apr_uint64_t data = apr_atoi64(failedlogin);
+        ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0, r,
+                      "Current password for login '%s' gave attempts number %llu", sent_user, data);
+        const apr_time_t now = apr_time_now();
+        if (data < 5) {
+            apr_table_set(conf->entries, sent_user, apr_lltoa(r->pool, (long long)(data+1) ) );
+        }
+        apr_time_t expiry = (apr_time_t)data;
+        if (data == 5) {
+            expiry = now + ( 60 * APR_USEC_PER_SEC);
+            apr_table_set(conf->entries, conf->username, apr_lltoa(r->pool, (apr_uint64_t)expiry ) );
+            ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0, r,
+                          "Set timeout for login '%s' up to %llu", sent_user, expiry);
+        }
+        if (data >= 5) {
+            if (now < expiry) {
+                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(03340)
+                              "Account Still Locked out: %s for %llu", sent_user, (expiry-now));
+                apr_table_set(r->headers_out, "Location", "lockedout");
+                return HTTP_MOVED_TEMPORARILY;
+            }
+            apr_table_set(conf->entries, sent_user, apr_itoa(r->pool,0));
+        }
         rv = check_authn(r, sent_user, sent_pw);
         if (OK == rv) {
             fake_basic_authentication(r, conf, sent_user, sent_pw);
